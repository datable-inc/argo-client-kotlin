package jp.datable.argo.workflow.client.models

data class WfWorkflowSpec(
    val activeDeadlineSeconds: Int?,
    val affinity: CoreAffinity?,
    val archiveLogs: Boolean?,
    val arguments: WfArguments?,
    val artifactGC: WfArtifactGC?,
    val artifactRepositoryRef: WfArtifactRepositoryRef?,
    val automountServiceAccountToken: Boolean?,
    val dnsConfig: CorePodDNSConfig?,
    val dnsPolicy: String?,
    val entrypoint: String?,
    val executor: WfExecutorConfig?,
    val hooks: Map<String, WfLifecycleHook>?,
    val hostAliases: List<CoreHostAlias>?,
    val hostNetwork: Boolean?,
    val imagePullSecrets: List<CoreLocalObjectReference>?,
    val metrics: WfMetrics?,
    val nodeSelector: Map<String, String>?,
    val onExit: String?,
    val parallelism: Int?,
    val podDisruptionBudget: PodDisruptionBudgetSpec?,
    val podGC: WfPodGC?,
    val podMetadata: WfMetadata?,
    val podPriority: Int?,
    val podPriorityClassName: String?,
    val podSpecPatch: String?,
    val priority: Int?,
    val retryStrategy: WfRetryStrategy?,
    val schedulerName: String?,
    val securityContext: CorePodSecurityContext?,
    val serviceAccountName: String?,
    val shutdown: String?,
    val `suspend`: Boolean?,
    val synchronization: WfSynchronization?,
    val templateDefaults: WfTemplate?,
    val templates: List<WfTemplate>?,
    val tolerations: List<CoreToleration>?,
    val ttlStrategy: WfTTLStrategy?,
    val volumeClaimGC: WfVolumeClaimGC?,
    val volumeClaimTemplates: List<CorePersistentVolumeClaim>?,
    val volumes: List<CoreVolume>?,
    val workflowMetadata: WfWorkflowMetadata?,
    val workflowTemplateRef: WfWorkflowTemplateRef?
)
